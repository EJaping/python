# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = True
RIGHT = False

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel = [0, 0]
    ball_vel[1] = -(random.randrange(60, 180) / 60.0)
    if direction == RIGHT:
        ball_vel[0] = random.randrange(120, 240) / 60.0
    else:
        ball_vel[0] = -(random.randrange(120, 240) / 60.0)

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = [0, 0]
    paddle2_pos = [(WIDTH - PAD_WIDTH), 0]
    paddle1_vel, paddle2_vel = 0, 0
    score1, score2 = 0, 0
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    if (ball_pos[1] - BALL_RADIUS) <= 0 or (ball_pos[1] + BALL_RADIUS) >= HEIGHT:
        ball_vel[1] = -ball_vel[1]
      
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "White", "White")
    
    # update paddle's vertical position, keep paddle on the screen
    if (paddle1_pos[1] + paddle1_vel) >= 0 and (paddle1_pos[1] + PAD_HEIGHT + paddle1_vel) <= HEIGHT:
        paddle1_pos[1] += paddle1_vel
    
    if (paddle2_pos[1] + paddle2_vel) >= 0 and (paddle2_pos[1] + PAD_HEIGHT + paddle2_vel) <= HEIGHT:
        paddle2_pos[1] += paddle2_vel
    
    # draw paddles
    a = [paddle1_pos[0] + PAD_WIDTH, paddle1_pos[1]]
    b = [paddle1_pos[0] + PAD_WIDTH, paddle1_pos[1] + PAD_HEIGHT]
    c = [paddle1_pos[0], paddle1_pos[1] + PAD_HEIGHT]
    canvas.draw_polygon([paddle1_pos, a, b, c], 1, "White", "White")
    
    d = [paddle2_pos[0] + PAD_WIDTH, paddle2_pos[1]]
    e = [paddle2_pos[0] + PAD_WIDTH, paddle2_pos[1] + PAD_HEIGHT]
    f = [paddle2_pos[0], paddle2_pos[1] + PAD_HEIGHT]
    canvas.draw_polygon([paddle2_pos, d, e, f], 1, "White", "White")
    
    # determine whether paddle and ball collide    
    if (ball_pos[0] - BALL_RADIUS) <= PAD_WIDTH:
        if paddle1_pos[1] <= (ball_pos[1] + BALL_RADIUS) and (ball_pos[1] + BALL_RADIUS) <= (paddle1_pos[1] + PAD_HEIGHT):
            ball_vel[0] = -(1.1 * ball_vel[0])
            ball_vel[1] = 1.1 * ball_vel[1]
        else:
            score2 += 1
            spawn_ball(RIGHT)
    
    if (ball_pos[0] + BALL_RADIUS) >= (WIDTH - PAD_WIDTH):
        if (ball_pos[1] >= paddle2_pos[1]) and (ball_pos[1] <= (paddle2_pos[1] + PAD_HEIGHT)):
            ball_vel[0] = -(1.1 * ball_vel[0])
            ball_vel[1] = 1.1 * ball_vel[1]
        else:
            score1 += 1
            spawn_ball(LEFT)
            
    # draw scores
    canvas.draw_text(str(score1), [WIDTH / 2 - 100, 40], 32, "White")
    canvas.draw_text(str(score2), [WIDTH / 2 + 100, 40], 32, "White")
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = -5
    if key == simplegui.KEY_MAP["s"]:
        paddle1_vel = 5
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = -5
    if key == simplegui.KEY_MAP["down"]:
        paddle2_vel = 5
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"] and paddle1_vel < 0:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP["s"] and paddle1_vel > 0:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP["up"] and paddle2_vel < 0:
        paddle2_vel = 0
    elif key == simplegui.KEY_MAP["down"] and paddle2_vel > 0:
        paddle2_vel = 0
        
def restart():
    new_game()

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Restart", restart, 100)
frame.add_label("")
frame.add_label("Player 1: 'w' and 's' keys.")
frame.add_label("")
frame.add_label("Player 2: 'up' and 'down' keys.")


# start frame
new_game()
frame.start()
