# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 5
time = 0
started = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.forward = angle_to_vector(self.angle)

        
    def draw(self,canvas):
        if self.thrust:
            canvas.draw_image(self.image, (self.image_center[0] + self.image_size[0], self.image_center[1]), 
                              self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, 
                              self.pos, self.image_size, self.angle)

    def update(self):
        # update angle
        self.angle += self.angle_vel
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        # update velocity
        self.forward = angle_to_vector(self.angle)
        if self.thrust:
            self.vel[0] += self.forward[0] * 0.2
            self.vel[1] += self.forward[1] * 0.2
            
        self.vel[0] *= 0.98
        self.vel[1] *= 0.98
        
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def get_angle_vel(self):
        return self.angle_vel
        
    def set_angle_vel(self, a):
        self.angle_vel = a
    
    def set_thrust(self, on):
        self.thrust = on
        if on:
            ship_thrust_sound.rewind()
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.pause()
        
    def shoot(self):
        a_missile = Sprite([self.pos[0] + (self.forward[0] * self.radius), self.pos[1] + (self.forward[1] * self.radius)],
                           [self.vel[0] + self.forward[0] * 6, self.vel[1] + self.forward[1] * 6], self.angle, 
                           0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)
    
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
            
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def get_velocity(self):
        return self.vel
   
    def draw(self, canvas):
        if self.animated:
            self.age -= 1
            current_image_center = [self.image_center[0] + self.image_size[0] * self.age, self.image_center[1]]
            canvas.draw_image(self.image, current_image_center, self.image_size, self.pos, self.image_size, self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size, self.angle)
    
    def update(self):
        # update angle
        self.angle += self.angle_vel
        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT   
        # update age
        self.age += 1
        return self.age >= self.lifespan    
        
    def collide(self, other_object):
        distance = dist(self.pos, other_object.get_position())
        colliding_distance = self.radius + other_object.get_radius()
        return distance <= colliding_distance

    
# helper functions:    
    
# update and draw a group of sprites         
def process_sprite_group(canvas, sprite_group):
    for sprite in set(sprite_group):
        sprite.update()
        sprite.draw(canvas)
        if sprite.update():
            sprite_group.remove(sprite)

# check for collisions with a group of sprites    
def group_collide(group, other_object):
    collision = 0
    for object in set(group):
        if object.collide(other_object):
            pos = object.get_position()
            vel = object.get_velocity()
            explosion = Sprite(pos, vel, 0, 0, explosion_image, explosion_info, explosion_sound)
            explosion_group.add(explosion)
            group.remove(object)
            collision += 1
    return collision == 1

# check for collisions between groups of sprites
def group_group_collide(group, other_group):
    collisions = 0
    for object in set(group):
        if group_collide(other_group, object):
            group.discard(object)
            collisions += 1
    return collisions
    
# draw handler           
def draw(canvas):
    global time, score, lives, rock_group, explosion_group, started
    
    # animate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # update and draw ship and sprites
    my_ship.draw(canvas)
    my_ship.update()
    process_sprite_group(canvas, rock_group)
    process_sprite_group(canvas, missile_group)
    process_sprite_group(canvas, explosion_group)
    
    # check for collisions and modify lives and score accordingly
    if group_collide(rock_group, my_ship):
        lives -= 1
    score += group_group_collide(missile_group, rock_group)
    
    # lives and score
    canvas.draw_text("Lives", (50, 50), 24, "White", "sans-serif")
    canvas.draw_text(str(lives), (50, 75), 24, "White", "sans-serif")
    canvas.draw_text("Score", (WIDTH - 110, 50), 24, "White", "sans-serif")
    canvas.draw_text(str(score), (WIDTH - 110, 75), 24, "White", "sans-serif")
    
    # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
        
    # restart if all lives are gone
    if lives == 0:
        started = False
        rock_group = set()
        explosion_group = set()
        lives = 5
        soundtrack.rewind()
    
        
# timer handler that spawns a rock    
def rock_spawner():
    global rock_group
    acc = score / 100
    if started:
        if len(rock_group) < 12:
            rock_pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
            rock_vel = [(random.random() + acc) * random.choice([-1, 1]), (random.random() + acc) * random.choice([-1, 1])]
            rock_avel = random.random() / random.choice([-10, 10])
            rock = Sprite(rock_pos, rock_vel, 0, rock_avel, asteroid_image, asteroid_info)
            if not rock.collide(my_ship):
                rock_group.add(rock)    

# key handlers
def keydown(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.set_angle_vel(-0.05)
    if key == simplegui.KEY_MAP["right"]:
        my_ship.set_angle_vel(0.05)
    if key == simplegui.KEY_MAP["up"]:
        my_ship.set_thrust(True)
    if key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()
   
def keyup(key):
    if key == simplegui.KEY_MAP["left"] and my_ship.get_angle_vel() < 0:
        my_ship.set_angle_vel(0)
    if key == simplegui.KEY_MAP["right"] and my_ship.get_angle_vel() > 0:
        my_ship.set_angle_vel(0)
    if key == simplegui.KEY_MAP["up"]:
        my_ship.set_thrust(False)
        
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        score = 0
        soundtrack.play()


# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and three sprite groups
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
rock_group = set()
missile_group = set()
explosion_group = set()

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()

